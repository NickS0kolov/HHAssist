import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.storage.redis import RedisStorage
from redis import asyncio as aioredis
from dotenv import load_dotenv

from app.parser import parse_resume
from app.analyzer import analyze_resume


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
UPLOAD_DIR = os.path.join(BASE_DIR, "uploads")
os.makedirs(UPLOAD_DIR, exist_ok=True)

# === –ó–∞–≥—Ä—É–∂–∞–µ–º .env ===
dotenv_path = os.path.join(BASE_DIR, ".env")
if os.path.exists(dotenv_path):
    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ {dotenv_path}")
    load_dotenv(dotenv_path)
else:
    print("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# === Redis (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π) ===
# –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ü–ö, –∞ Redis –≤ Docker ‚Äî –æ—Å—Ç–∞–≤—å localhost
# –ï—Å–ª–∏ –æ–±–∞ –≤ Docker ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π host="redis"
REDIS_URL = os.getenv("REDIS_URL")
redis = aioredis.from_url(REDIS_URL, decode_responses=True)
storage = RedisStorage(redis)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ===
@dp.message(F.document)
async def handle_resume(message: Message):
    document = message.document

    if not document.file_name.lower().endswith((".pdf", ".docx")):
        await message.reply("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏–ª–∏ DOCX.")
        return

    file_path = os.path.join(UPLOAD_DIR, document.file_name)
    await bot.download(document, destination=file_path)
    await message.reply("üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    text = parse_resume(file_path)
    if not text:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—é–º–µ.")
        return

    user_key = f"resume:{message.from_user.id}"
    await redis.setex(user_key, 172800, text)

    await message.reply("‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    
    
@dp.message(F.text)
async def handle_job_link(message: Message):
    job_description = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –∏–∑ Redis
    user_key = f"resume:{message.from_user.id}"
    resume_text = await redis.get(user_key)

    if not resume_text:
        await message.reply("‚ö†Ô∏è –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ.")
        return

    await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏—é... —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.")
    
    result = analyze_resume(resume_text, job_description)

    await message.reply(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n{result}")



# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
